# -*- coding: utf-8 -*-
"""ADC-Sim.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xW5R3QwsKOOp-zIMvgUP59BtNrgOQ8D2
"""

#poliastro is the orbital simulation library that will be used in this experiment
!pip install poliastro==0.13.1

#These libraries are used for this simulation
import poliastro as pol
from poliastro.twobody import Orbit
from poliastro.maneuver import Maneuver
from poliastro.bodies import Earth, Mars, Sun
from poliastro.plotting import OrbitPlotter2D
from poliastro.plotting import OrbitPlotter3D
import numpy as np
import scipy as sci
from astropy import units as u
import random

#This simple class is the spacecraft object that is instantiated with some orbital parameters.
#A spacecraft has an orbit as well as the ability to perform delta-v impulse maneuvers.
class Spacecraft:

  def __init__(self, position, velocity):
    self.r_start =  position*u.km
    self.v_start =  velocity*u.km/u.s

    self.orbit = Orbit.from_vectors(Earth, self.r_start, self.v_start)

  def maneuver(self, dv):
    man = Maneuver.impulse(dv*u.km/u.s)
    self.orbit = self.orbit.apply_maneuver(man)

"""This section is just testing out the orbit plotter and the maneuver functions"""

test1 = Spacecraft((-6045, -3490, 2500),(2, 0.5, 8))
test2 = Spacecraft((8000, 0, 0), (0, 8, 0))

op = OrbitPlotter3D()
op.plot(test1.orbit)
op.plot(test2.orbit)

#test1.maneuver((0,0,1))
test1.orbit = test1.orbit.propagate(30*u.min)
test2.orbit = test2.orbit.propagate(30*u.min)

op = OrbitPlotter3D()
op.plot(test1.orbit)
op.plot(test2.orbit)

test2.orbit.inc

"""This section is the first, most simple simulation. The goal is for a single spacecraft to change its orbit to a circular, polar orbit through a series of impulse maneuvers. The series of impulse maneuvers are 30 impulses that are each 20 minutes apart. A maneuver can be along the x, y or z axis and is fixed at 500 mps impulses for the purpose of this first experiment."""

#The test spacecraft have some launch orbits, and the most circular and polar maneuver strings are calculated using a genetic algorithm in a seperate script. Those fittest maneuver strings and their fitness scores are listed here.
tests = [Spacecraft((-6045, -3490, 2500), (3.457, -6.618, 3.533)), Spacecraft((-5045, -4490, 2500), (-4.457, 5.618, 3.533)),  Spacecraft((-5045, -4490, 2500), (4.457, -5.618, -3.533)), Spacecraft((-5045, -4490, 2500), (4.457, -5.618, 3.533))]
fittest = [('510112120534235113005113231330', 0.07596826894482862), ('321151111511131012234320311044', 0.031511264111432236),  ('112034511115323311313503254434', 0.05042395308883796), ('512220120424544202120422213333', 0.04137627266078643)]

#This is a plot of all of the initial spacecraft orbits
op = OrbitPlotter3D()
op.plot(tests[0].orbit)
op.plot(tests[1].orbit)
op.plot(tests[2].orbit)
op.plot(tests[3].orbit)

#This is a plot of the final spacecraft orbits, after applying the fittest maneuver strings for each of them.
f_orbs = [test.orbit for test in tests]
delt_v_size = 500

for i in range(0,len(f_orbs)): 
  for man in fittest[i][0]:
      if man == '1':
        f_orbs[i] = f_orbs[i].apply_maneuver(Maneuver.impulse((delt_v_size,0,0)*u.m/u.s))
      if man == '2':
        f_orbs[i] = f_orbs[i].apply_maneuver(Maneuver.impulse((0,delt_v_size,0)*u.m/u.s))
      if man == '3':
        f_orbs[i] = f_orbs[i].apply_maneuver(Maneuver.impulse((0,0,delt_v_size)*u.m/u.s))
      if man == '4':
        f_orbs[i] = f_orbs[i].apply_maneuver(Maneuver.impulse((-delt_v_size,0,0)*u.m/u.s))
      if man == '5':
        f_orbs[i] = f_orbs[i].apply_maneuver(Maneuver.impulse((0,-delt_v_size,0)*u.m/u.s))
      if man == '6':
        f_orbs[i] = f_orbs[i].apply_maneuver(Maneuver.impulse((0,0,-delt_v_size)*u.m/u.s))
      f_orbs[i] = f_orbs[i].propagate(20*u.min)

op = OrbitPlotter3D()
op.plot(f_orbs[0])
op.plot(f_orbs[1])
op.plot(f_orbs[2])
op.plot(f_orbs[3])